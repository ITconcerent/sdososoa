// products.js - –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é

let productsDatabase = {
    iphone: [],
    ipad: [], 
    macbook: [],
    'apple-watch': []
};

// Broadcast Channel –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å
const productsBroadcast = new BroadcastChannel('products_updates');

// –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ localStorage
function loadProductsToDatabase() {
    const storedProducts = localStorage.getItem('storeProducts');
    if (storedProducts) {
        console.log('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –∞–¥–º—ñ–Ω–∫–∏...');
        const adminProducts = JSON.parse(storedProducts);
        updateMainProductsDatabase(adminProducts);
        
        console.log('‚úÖ –¢–æ–≤–∞—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', {
            iphone: productsDatabase.iphone.length,
            ipad: productsDatabase.ipad.length,
            macbook: productsDatabase.macbook.length,
            'apple-watch': productsDatabase['apple-watch'].length
        });
    } else {
        console.log('‚ÑπÔ∏è –¢–æ–≤–∞—Ä—ñ–≤ –∑ –∞–¥–º—ñ–Ω–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å.');
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –∞–¥–º—ñ–Ω–∫–∏
function updateMainProductsDatabase(newProducts) {
    console.log('–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –∞–¥–º—ñ–Ω–∫–∏...', newProducts);
    
    const convertedProducts = {
        iphone: newProducts.filter(p => p.category === 'iphone'),
        ipad: newProducts.filter(p => p.category === 'ipad'),
        macbook: newProducts.filter(p => p.category === 'macbook'),
        'apple-watch': newProducts.filter(p => p.category === 'apple-watch')
    };
    
    Object.keys(convertedProducts).forEach(category => {
        productsDatabase[category] = convertedProducts[category];
    });
    
    console.log('‚úÖ –ë–∞–∑–∞ —Ç–æ–≤–∞—Ä—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–∞!');
    
    // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    if (typeof showNotification === 'function') {
        showNotification('üîÑ –¢–æ–≤–∞—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑–∞ ID —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
function getProductById(productId, category) {
    if (!productsDatabase[category]) {
        console.error('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞:', category);
        return null;
    }
    
    const product = productsDatabase[category].find(p => p.id === productId);
    if (!product) {
        console.error('–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π:', productId, '–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó', category);
        return null;
    }
    return product;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
function getProductsByCategory(category) {
    return productsDatabase[category] || [];
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ (–¥–ª—è –ø–æ—à—É–∫—É)
function getAllProducts() {
    const allProducts = [];
    Object.values(productsDatabase).forEach(categoryProducts => {
        allProducts.push(...categoryProducts);
    });
    return allProducts;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
function getUniqueModelsByCategory(category) {
    if (!productsDatabase[category]) return [];
    
    const models = new Set();
    productsDatabase[category].forEach(product => {
        if (product && product.model) {
            models.add(product.model);
        }
    });
    return Array.from(models);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ —Ü—ñ–Ω—ñ
function getFilteredProducts(category, maxPrice, selectedModels = []) {
    if (!productsDatabase[category]) return [];
    
    let filtered = productsDatabase[category].filter(product => {
        if (!product) return false;
        
        const priceMatch = product.price <= maxPrice;
        const modelMatch = selectedModels.length === 0 || selectedModels.includes(product.model);
        
        return priceMatch && modelMatch;
    });
    
    return filtered;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å (–¥–ª—è –≤–∏–∫–ª–∏–∫—É –∑ –∫–Ω–æ–ø–∫–∏)
function checkForUpdates() {
    const storedProducts = localStorage.getItem('storeProducts');
    if (storedProducts) {
        const adminProducts = JSON.parse(storedProducts);
        if (adminProducts.length > 0) {
            updateMainProductsDatabase(adminProducts);
            if (typeof showNotification === 'function') {
                showNotification('‚úÖ –¢–æ–≤–∞—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
            }
            return true;
        }
    } else {
        if (typeof showNotification === 'function') {
            showNotification('‚ùå –ù–µ–º–∞—î –Ω–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è', 'error');
        }
    }
    return false;
}

// –°–ª—É—Ö–∞—á –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ –∞–¥–º—ñ–Ω–∫–∏
function setupProductsUpdateListener() {
    productsBroadcast.onmessage = (event) => {
        if (event.data.type === 'products_updated') {
            console.log('üîî –û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –≤—ñ–¥ –∞–¥–º—ñ–Ω–∫–∏');
            loadProductsToDatabase();
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è —ñ—Å–Ω—É—î
            if (typeof displayProducts === 'function' && typeof currentCategory !== 'undefined') {
                displayProducts(currentCategory);
            }
            
            // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (typeof showNotification === 'function') {
                showNotification('üîÑ –ö–∞—Ç–∞–ª–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ!', 'info');
            }
        }
    };
}

// –°–ª—É—Ö–∞—á –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –º—ñ–∂ –≤–∫–ª–∞–¥–∫–∞–º–∏
function setupWindowMessageListener() {
    window.addEventListener('message', (event) => {
        if (event.data.type === 'products_updated') {
            console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ —ñ–Ω—à–æ—ó –≤–∫–ª–∞–¥–∫–∏');
            loadProductsToDatabase();
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è —ñ—Å–Ω—É—î
            if (typeof displayProducts === 'function' && typeof currentCategory !== 'undefined') {
                displayProducts(currentCategory);
            }
        }
    });
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
function startAutoUpdateCheck() {
    setInterval(() => {
        const lastUpdate = localStorage.getItem('productsLastUpdate');
        const currentUpdate = localStorage.getItem('storeProducts');
        
        if (lastUpdate && currentUpdate) {
            loadProductsToDatabase();
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è —ñ—Å–Ω—É—î
            if (typeof displayProducts === 'function' && typeof currentCategory !== 'undefined') {
                displayProducts(currentCategory);
            }
        }
    }, 30000);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
function searchProducts(searchTerm) {
    const allProducts = getAllProducts();
    const searchLower = searchTerm.toLowerCase().trim();
    
    if (!searchLower) return [];
    
    const exactMatches = [];
    const similarMatches = [];
    
    allProducts.forEach(product => {
        if (!product) return;
        
        const productName = product.name ? product.name.toLowerCase() : '';
        const productModel = product.model ? product.model.toLowerCase() : '';
        const productSpecs = product.specs ? product.specs.toLowerCase() : '';
        const productDescription = product.description ? product.description.toLowerCase() : '';
        
        // –¢–æ—á–Ω—ñ –∑–±—ñ–≥–∏
        if (productName.includes(searchLower) || 
            productModel.includes(searchLower) ||
            productSpecs.includes(searchLower)) {
            exactMatches.push(product);
        }
        // –°—Ö–æ–∂—ñ –∑–±—ñ–≥–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥–æ–≤–≥–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤)
        else if (searchLower.length > 2) {
            const searchWords = searchLower.split(' ');
            const productText = `${productName} ${productModel} ${productSpecs} ${productDescription}`;
            
            const hasSimilarWords = searchWords.some(word => 
                productText.includes(word)
            );
            
            if (hasSimilarWords) {
                similarMatches.push(product);
            }
        }
    });
    
    return {
        exact: exactMatches,
        similar: similarMatches
    };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ (–¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π)
function getRandomProducts(count = 4) {
    const allProducts = getAllProducts();
    if (allProducts.length === 0) return [];
    
    const shuffled = [...allProducts].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, count);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
function getProductsByStatus(status) {
    const allProducts = getAllProducts();
    return allProducts.filter(product => product.status === status);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ —Ç–æ–≤–∞—Ä–∞–º–∏
function getCategoriesWithProducts() {
    const categories = [];
    Object.keys(productsDatabase).forEach(category => {
        if (productsDatabase[category].length > 0) {
            categories.push(category);
        }
    });
    return categories;
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
function initializeProductsDatabase() {
    console.log('üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ —Ç–æ–≤–∞—Ä—ñ–≤...');
    loadProductsToDatabase();
    setupProductsUpdateListener();
    setupWindowMessageListener();
    startAutoUpdateCheck();
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
document.addEventListener('DOMContentLoaded', function() {
    initializeProductsDatabase();
});

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
if (typeof window !== 'undefined') {
    window.productsDatabase = productsDatabase;
    window.loadProductsToDatabase = loadProductsToDatabase;
    window.updateMainProductsDatabase = updateMainProductsDatabase;
    window.getProductById = getProductById;
    window.getProductsByCategory = getProductsByCategory;
    window.getAllProducts = getAllProducts;
    window.getUniqueModelsByCategory = getUniqueModelsByCategory;
    window.getFilteredProducts = getFilteredProducts;
    window.checkForUpdates = checkForUpdates;
    window.searchProducts = searchProducts;
    window.getRandomProducts = getRandomProducts;
    window.getProductsByStatus = getProductsByStatus;
    window.getCategoriesWithProducts = getCategoriesWithProducts;
    window.initializeProductsDatabase = initializeProductsDatabase;
}